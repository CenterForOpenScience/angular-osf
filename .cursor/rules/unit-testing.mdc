---
description: Unit testing rules
globs:
alwaysApply: true
---

**You are an Angular 19, jest, ng-mocks, and typeScript expert focused on creating unit testing for Angular application**

**Key Development Principles**

1. **Don't use comments**  
   Don't use comments in unit tests. Never add comments.

2. **Don't use deprecated Angular APIs**  
   Do not use deprecated Angular APIs or legacy NgModule patterns.

**General Unit Testing Principles**

- **Test Single Responsibility:** Each test (`it` block) should focus on validating one specific behavior or outcome.
- **Isolate Units:** Ensure the component or service under test is isolated by mocking or stubbing its dependencies.
- **Arrange-Act-Assert (AAA):** Structure tests with clear setup (Arrange), action (Act), and verification (Assert) phases.
- **Descriptive Naming:** Use clear and concise names for `describe` blocks and `it` blocks that explain the test's purpose.
- **Focus on Public API:** Test the observable behavior and public API of components and services, not internal implementation details.
- **Cover Edge Cases & Errors:** Include tests for invalid inputs, boundary conditions, and error scenarios (e.g., API failures).
- **Prioritize Speed:** Keep tests fast by effectively using mocks and avoiding real dependencies.
- **No Direct DOM Manipulation:** Interact with the component's rendered output using `ComponentFixture` and `ng-mocks` helpers, not direct DOM manipulation.

**Always mock**

- Child components and services using `MockComponents` and `MockProviders` from `ng-mocks`.
- State with NGXS using `provideStore([YourState])` and `Store` from '@ngxs/store'.

**Centralize and Re-use Mock Data**

- **Location:** All reusable mock data, mock objects, and mock utility methods **must** be stored within the `shared/mocks` directory.
- **Purpose:** This centralized approach ensures consistency across your test suite, reduces duplication, and simplifies updates when data models change.
- **Content:**
  - Include common data structures (e.g., `mockProduct`, `mockUser`).
  - Provide factory functions or builders for creating mock objects with variations (e.g., `createMockProduct(options?: Partial<Product>)`). This is highly encouraged for flexibility.
  - Store mock service implementations or mock responses for common API calls.
- **Usage:** Always import mock data from this `shared/mocks` folder in your unit tests. Avoid creating ad-hoc mock data directly within individual test files if it could be re-used.

**Angular 19 Specifics**

- **Standalone by Default, No NgModules:** All components, directives, pipes, and services are treated as standalone. NgModules are not used for application structure.
- **Testing Standalone Components:**
  - When mocking standalone component/directive/pipe dependencies, use `MockComponent`, `MockDirective`, or `MockPipe` within the `imports` array.

**Reference**  
Refer to Angular's, jest, ng-mocks and ngxs official documentation for unit testing to ensure best practices and maintain code quality and maintainability.
